<?xml version="1.0" encoding="UTF-8"?>
<Article>
  <MenuTitle>API Reference</MenuTitle>
  <Ingress>
    The Bring Booking API is a logged-in service that lets mybring-users (customers of mybring.com) programmatically
    create a booking by invoking a Web Service over SOAP, or by posting XML/JSON over HTTP.
    The API uses the same backend as Bring Booking web (beta.bring.no/booking) and the same PDF labels.
  </Ingress>
  <Content><![CDATA[
<p>
  We support two types of integration with the Booking API. XML/JSON over HTTP, and SOAP (over HTTP).
</p>

<p>
  The currently supported products include Bring Parcel products (domestic Norway), Courier Services
  for Nordic cities, and the QuickPack product line for international express shipments.
</p>

<p>
  Bring Booking uses <a href="../shipping-guide/apireference.html">Bring Fraktguide</a> as the source for price
  and availability for the different products. We advise clients of the Booking API to use Fraktguiden for
  getting the list price and checking availability before sending a booking request.
</p>

<h3>Shipment Labels</h3>

<p>
  The Booking API generates and sends all necessary EDI messages to carry out the shipment. A URL to a
  PDF label is returned in responses. This label must be printed and be attached to the shipment. A URL that points
  to tracking information is also returned.
</p>

<h3>Billing and Payment</h3>

<p>
  Note that invoice payment is the only available payment option for the Booking API. This means that
  the mybring user ID used in the booking request must have access to the customer number specified as
  payer of the booking.
</p>

<p>
  The API is currently under development and will have multiple releases, each extending the available
  functionality and products. An early beta-version of the API is available now as of january 2012, this
  beta will lead to a final stable V1 of the API will be available during Q1 2012.
</p>

<h2>Releases</h2>

<p>
  V1: Initial version supporting a single consignment with a single package. Beta launched january 2012.
</p>

<h2>Technical information</h2>

<h3><a name="soap">SOAP API WebService definition and endpoint</a></h3>
<p>
  WSDL: <a href="https://beta.bring.com/booking/api/ws/booking-v1.wsdl">https://beta.bring.com/booking/api/ws/booking-v1.wsdl</a>
</p>
<p>
  XSD: <a href="https://beta.bring.com/booking/api/schema/booking-v1.xsd">https://beta.bring.com/booking/api/schema/booking-v1.xsd</a>
</p>
<p>
  Endpoint: <a href="https://www.mybring.com/booking/api/ws">https://www.mybring.com/booking/api/ws</a>
</p>

<h3>XML Schema</h3>
<p>
  XSD: <a href="http://beta.bring.com/booking/api/schema/booking-v1.xsd">http://beta.bring.com/booking/api/schema/booking-v1.xsd</a>
</p>

<h3>Versioning strategy</h3>

<p>
  Each request has a schemaVersion element indicating which release of the schema is being used in the
  request and expected schema format in the response.
  Important: All clients must accept new (unknown) elements in the response. E.g. unknown elements
  should be ignored.
  The client framework used by client must thus not crash when unknown elements are encountered. Note
  that this requirement excludes the (old, but still widely used) Apache Axis 1.x Web Service client framework.
</p>


<h3>XML/JSON API - Content-type negotiation</h3>

<p>
  The following applies only to the XML/JSON API (and not to the SOAP Web Service endpoint).
  The XML/JSON API uses two headers to specify request and response format.
</p>

<table>
  <tr>
    <th>Header name</th>
    <th>Possible header values</th>
    <th>Comment</th>
  </tr>
  <tr>
    <td>Content-Type</td>
    <td>application/xml or application/json</td>
    <td>This specifies the request format</td>
  </tr>
  <tr>
    <td>Accept</td>
    <td>application/xml or application/json</td>
    <td>This specifies the desired response format</td>
  </tr>
</table>

<h2><a name="authentication">Authentication - API Login with Mybring</a></h2>

<p>
  We use the mybring authentication framework. This is a proprietary single-sign on solution that uses two
  HTTP Headers for authentication to the API. Only users with a mybring user (with attached customer numbers)
  can use the Booking API. In the Booking Web Service / XML API request, you must set two HTTP headers to
  access the API.
</p>

<p>
  To become a mybring customer, <a href="http://www.mybring.com/useradmin/open/signup/new">signup to mybring</a>.
  The API key is currently only visible to organization administrators. Please contact the development team
  (developer@bring.com) to receive a Beta API-key.
</p>

<table>
  <tr>
    <th>Header name</th>
    <th>Example header value</th>
    <th>Comment</th>
  </tr>
  <tr>
    <td>X-MyBring-API-Uid</td>
    <td>booking@customer.com</td>
    <td>This is the mybring login ID.</td>
  </tr>
  <tr>
    <td>X-MyBring-API-Key</td>
    <td>1234abc-abcd-1234-5678-abcd1234abcd</td>
    <td>This is the API key of the mybring user.</td>
  </tr>
</table>

<br/>

<h2><a name="authorization">Authorization - by customer numbers (per specialist)</a></h2>

<p>
  In addition to authentication, you need to be authorized with the BUYER role in order to perform bookings.
  The authorization is currently handled with customer numbers on a per specialist basis.
</p>

<p>
  To perform a booking, you must specify which customer number to use.
  For your convenience, there is an API for getting the customer numbers of your mybring user. See
  <a href="customerapiexamples.html">Customer API examples</a> for how to obtain the customer numbers
  you have access to.
</p>

<h3>How to use Customer numbers in Booking API</h3>

<h4>XML</h4>
<pre class="code">
&lt;product&gt;
    &lt;id&gt;QUICKPACK_DAY_CERTAIN&lt;/id&gt;
    &lt;customerNumber&gt;EXPRESS_NORWAY-2caedf20-27da-012f-3858-58b0357c4f66&lt;/customerNumber&gt;
    &lt;!-- Etc... --&gt;
&lt;/product&gt;
</pre>


<h4>JSON</h4>
<pre class="code">
"product": {
    "id": "BPAKKE_DOR-DOR",
    "customerNumber": "PARCELS_NORWAY-00001234567",
    // Etc...
}
</pre>

<br/>

<h2><a name="testing">Testing - Important Information reguarding test requests</a></h2>

<p>
  This service will send actual production orders unless it is set to testing mode.
</p>
<p>
  To use the test mode, you need to set the testIndicator flag on the root node.
</p>

<h3>XML: testIndicator</h3>
<pre class="code">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;bookingRequest xmlns=&quot;http://www.bring.no/booking/&quot; testIndicator=&quot;true&quot;&gt;
    ...
&lt;/bookingRequest&gt;
</pre>

<h3>JSON: testIndicator</h3>
<pre class="code">
{
    "testIndicator": true,
    "schemaVersion": "1",
    ...
}
</pre>

<h2><a name="error-handling">Error handling</a></h2>

<p>
  If an error occurs, the following will be provided:
</p>

<table>
  <tr>
    <td>uniqueId</td>
    <td>A unique log ID (UUID) that can be used as a reference for the error</td>
  </tr>
  <tr>
    <td>code</td>
    <td>An error code describing the error</td>
  </tr>
  <tr>
    <td>message</td>
    <td>
      Internationalized messages (with <message lang=”xx”> elements). First version will be with
      lang=”en” (English) only.
    </td>
  </tr>
</table>

<br/>

<p>
  The enumeration of error codes for version 1 (beta) is currently as follows:
</p>

<div class="codetabs">
<h3><a href="#xml">XML</a></h3>
<div data-tab="xml" class="tab api-call">
<p>
    <a target="_blank" class="request" href="http://beta.bring.com/booking/api/errors.xml"
       data-internal="/proxy/booking/api/errors.xml">
        Example request XML
    </a>
</p>
<pre class="xml response delay-snippet"></pre>
</div>

<h3><a href="#json">JSON</a></h3>
<div data-tab="json" class="tab api-call">
<p>
    <a target="_blank" class="request" href="http://beta.bring.com/booking/api/errors.json"
    data-internal="/proxy/booking/api/errors.json">
        Example request JSON
    </a>
</p>
<pre class="json response delay-snippet"></pre>
</div>
</div>
]]>
  </Content>
</Article>