<?xml version="1.0" encoding="UTF-8"?>
<Article>
  <MenuTitle>API Reference</MenuTitle>
  <Ingress>
    The Bring Booking API is a logged-in service that lets mybring-users (customers of mybring.com) programmatically
    create a booking by invoking a Web Service or by posting XML/JSON over HTTP.
    The API uses the same backend as Bring Booking web (beta.bring.no/booking) and the same PDF labels.
  </Ingress>
  <Content>
    <![CDATA[
        <p>
          We support several means of integration with the Booking API. For XML or JSON over HTTP, see this document.
          For the documentation for the SOAP WebService, see <a href="soap.html" alt="SOAP WebService">SOAP</a>.
        </p>

        <p>
          Currently supported products include Bring Parcel products (domestic Norway), Courier Services
          for Nordic cities and the QuickPack product line for international express shipments.
        </p>

        <p>
          Bring Booking uses Bring Fraktguide as source for price and availability for the different products.
          We advise clients of the Booking API to use Fraktguiden for getting the list price and checking
          availability before sending a booking request.
        </p>

        <p>
          Note that invoice payment is the only available payment option for the Booking API. This means that
          the mybring user ID used in the booking request must have access to the customer number specified as
          payer of the booking.
        </p>

        <p>
          The API is currently under development and will have multiple releases, each extending the available
          functionality and products. An early beta-version of the API is available now as of january 2012, this
          beta will lead to a final stable V1 of the API will be available during Q1 2012.
        </p>

        <h4>Releases</h4>

        <p>
          V1: Initial version supporting a single consignment with a single package. Beta launched january 2012.
        </p>

        <h2>Technical information</h2>

        <p>
          XSD: <a href="http://beta.bring.com/booking/api/schema/booking-v1.xsd">http://beta.bring.com/booking/api/schema/booking-v1.xsd</a>
        </p>

        <h4>Lables and EDI</h4>

        <p>
          The Booking API generates and sends all necessary EDI messages to carry out the shipment. A URL to a
          PDF label is returned. This label must be printed and be attached to the shipment.  A URL that points
          to tracking information is also returned.
        </p>

        <p>
          Regarding label format, please see PDF file sent together with this document. A screenshot of the
          label is presented below.
        </p>

        <h4>Versioning strategy</h4>

        <p>
          Each request has a schemaVersion element indicating which release of the schema is being used in the
          request and expected schema format in the response.
          Important: All clients must accept new (unknown) elements in the response. E.g. unknown elements
          should be ignored.
          The client framework used by client must thus not crash when unknown elements are encountered. Note
          that this requirement excludes the (old) Apache Axis 1.x Web Service client framework.
        </p>


        <h4>XML/JSON API Content type negotiation</h4>

        <p>
          The following applies only to the XML/JSON API (and not to the SOAP Web Service endpoint).
          The XML/JSON API uses two headers to specify request and response format.
        </p>

        <table>
          <tr>
            <th>Header name</th>
            <th>Possible header values</th>
            <th>Comment</th>
          </tr>
          <tr>
            <td>Content-Type</td>
            <td>application/xml or application/json</td>
            <td>This specifies the request format</td>
          </tr>
          <tr>
            <td>Accept</td>
            <td>application/xml or application/json</td>
            <td>This specifies the desired response format</td>
          </tr>
        </table>

        <br/>


        <h4><a name="authentication">Authentication - API Login with Mybring</a></h4>

        <p>
          We use the mybring authentication framework. This is a proprietary single-sign on solution that uses two
          HTTP Headers for authentication to the API. Only users with a mybring user (with attached customer numbers)
          can use the Booking API. In the Booking Web Service / XML API request, you must set two HTTP headers to
          access the API:
        </p>

        <table>
          <tr>
            <th>Header name</th>
            <th>Example header value</th>
            <th>Comment</th>
          </tr>
          <tr>
            <td>X-MyBring-API-Uid</td>
            <td>booking@customer.com</td>
            <td>This is the mybring login ID.</td>
          </tr>
          <tr>
            <td>X-MyBring-API-Key</td>
            <td>1234abc-abcd-1234-5678-abcd1234abcd</td>
            <td>This is the API key of the mybring user.</td>
          </tr>
        </table>

        <br/>

        <p>
          To become a mybring customer, <a href="http://www.mybring.com/useradmin/open/signup/new">signup to mybring</a>.
          The API key is currently only visible to organization administrators. Please contact the development team
          (developer@bring.com) to receive a Beta API-key.
        </p>

        <h4><a name="authorization">Authorization - By product and specialist</a></h4>

        <p>
          In addition to authentication, you need to be authorized with the BUYER role in order to perform bookings.
          The authorization is currently handled with customer numbers on a per specialist basis.
          We are currently developing a simpler API to obtain your different customer numbers, for now, please consult
          the development team (developer@bring.com) to obtain your customer numbers.
        </p>

        <p>
          The customer number is added to the product-specification of the request.
        </p>

        <h4>JSON API - customer number</h4>
        <pre class="code">
"product": {
    "id": "BPAKKE_DOR-DOR",
    "customerNumber": "PARCELS_NORWAY-10001123123",
    // Etc...
}
        </pre>
        <h4>XML API - customer number</h4>
        <pre class="code">
&lt;product&gt;
    &lt;id&gt;QUICKPACK_DAY_CERTAIN&lt;/id&gt;
    &lt;customerNumber&gt;EXPRESS_NORWAY-2caedf20-27da-012f-3858-58b0357c4f66&lt;/customerNumber&gt;
    &lt;!-- Etc... --&gt;
&lt;/product&gt;
        </pre>


        <p>
          The customer numbers are prefixed with the specialist, and then the customer number. For Courier and
          Bring Express-products, we use a UUID to identify users.
        </p>

        <table>
          <tr>
            <th>Specialist</th>
            <th>Example products</th>
            <th>Example customerNumber</th>
          </tr>
          <tr>
            <td>Bring Parcels, Norway</td>
            <td>BPAKKE_DOR-DOR, PA_DOREN, EKSPRESS09</td>
            <td>PARCELS_NORWAY-10001123123</td>
          </tr>
          <tr>
            <td>Bring Express, Norway</td>
            <td>COURIER_4H, QUICKPACK_SAMEDAY, QUICKPACK_DAY_CERTAIN</td>
            <td>EXPRESS_NORWAY-2caedf20-27da-012f-3858-58b0357c4f66</td>
          </tr>
          <tr>
            <td>Bring Express, Sweden</td>
            <td>COURIER_4H, QUICKPACK_SAMEDAY, QUICKPACK_DAY_CERTAIN</td>
            <td>EXPRESS_SWEDEN-406077f0-27da-012f-3859-58b0357c4f66</td>
          </tr>
        </table>

        <h4><a name="testing">Testing - Important Information reguarding test requests</a></h4>

        <p>
          This service is currently only live. It will send actual production orders unless it is set to testing mode.
        </p>
        <p>
          To use the test mode, you need to set the testIndicator flag on the root node.
        </p>

        <h4>JSON: testIndicator</h4>
        <pre class="code">
{
    "testIndicator": true,
    "schemaVersion": "1",
    ...
}
        </pre>


        <h4>XML: testIndicator</h4>
        <pre class="code">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;bookingRequest xmlns=&quot;http://www.bring.no/booking/&quot; testIndicator=&quot;true&quot;&gt;
    ...
&lt;/bookingRequest&gt;
        </pre>

        <h4>Data structure</h4>

        <p>
          See sample requests and responses below, as well as the XML Schema. Please note that this is a
          beta-version of the schema. The final structure of the schema will be released with version 1.
        </p>

        <p>
          Note that although the schema allows multiple consignments and packages, as of version 1, only one
          consignment with one package will be supported.
        </p>

        <h4><a name="error-handling">Error handling</a></h4>

        <p>
          If an error occurs, the following will be provided:
        </p>

        <table>
          <tr>
            <td>uniqueId</td>
            <td>A unique log ID (UUID) that can be used as a reference for the error</td>
          </tr>
          <tr>
            <td>code</td>
            <td>An error code describing the error</td>
          </tr>
          <tr>
            <td>messages</td>
            <td>
              Internationalized messages (with <message lang=”xx”> elements). First version will be with
              lang=”en” (English) only.
            </td>
          </tr>
        </table>

        <br/>

        <p>
          The enumeration of error codes for version 1 (beta) is currently as follows:
        </p>

        <table>
          <tr><th>Error code</th><th>Example error message</th></tr>
          <tr><td>BOOK-INPUT-001</td><td>Bad request</td></tr>
          <tr><td>BOOK-INPUT-002</td><td>Weight is required</td></tr>
          <tr><td>BOOK-INPUT-003</td><td>Schema version must be present</td></tr>
          <tr><td>BOOK-INPUT-004</td><td>At least one consignment must be specified</td></tr>
          <tr><td>BOOK-INPUT-005</td><td>Multiple consignments in one booking is not supported</td></tr>
          <tr><td>BOOK-INPUT-006</td><td>Sender must be specified</td></tr>
          <tr><td>BOOK-INPUT-007</td><td>Recipient must be specified</td></tr>
          <tr><td>BOOK-INPUT-008</td><td>Product must be set</td></tr>
          <tr><td>BOOK-INPUT-009</td><td>Package must be specified</td></tr>
          <tr><td>BOOK-INPUT-011</td><td>Multiple packages in one booking is not supported</td></tr>
          <tr><td>BOOK-INPUT-012</td><td>Shipping date and time must be provided</td></tr>
          <tr><td>BOOK-INPUT-013</td><td>Package dimensions must be provided</td></tr>
          <tr><td>BOOK-INPUT-014</td><td>Name must be provided</td></tr>
          <tr><td>BOOK-INPUT-015</td><td>Address must be provided</td></tr>
          <tr><td>BOOK-INPUT-016</td><td>City must be provided</td></tr>
          <tr><td>BOOK-INPUT-017</td><td>ISO Country code must be provided</td></tr>
          <tr><td>BOOK-INPUT-018</td><td>Product ID must be provided</td></tr>
          <tr><td>BOOK-INPUT-019</td><td>Customer number must be provided</td></tr>
          <tr><td>BOOK-INPUT-020</td><td>Invalid product ID</td></tr>
          <tr><td>BOOK-INPUT-021</td><td>Invalid customer number</td></tr>
          <tr><td>BOOK-INPUT-022</td><td>Illegal product for country</td></tr>
          <tr><td>BOOK-INPUT-023</td><td>The shipment is to big to send with the given product</td></tr>
          <tr><td>BOOK-INPUT-024</td><td>The product is not available between the given addresses (outside coverage)</td></tr>
          <tr><td>BOOK-INPUT-025</td><td>The product is not available between the given countries</td></tr>
          <tr><td>BOOK-INPUT-027</td><td>Failed because of product specific requirements</td></tr>
          <tr><td>BOOK-INPUT-028</td><td>Invalid country code</td></tr>
          <tr><td>BOOK-AUTHORIZATION-001</td><td>Your user is not authorized to perform this action</td></tr>
          <tr><td>BOOK-VALIDATION-001</td><td>Unexpected business validation rule failure</td></tr>
          <tr><td>BOOK-INTERNAL-001</td><td>An unexpected error occured</td></tr>
          <tr><td>BOOK-INTERNAL-002</td><td>A required external service is unavailable</td></tr>
        </table>

        <hr/>
        <h2><a name="examples">Examples</a></h2>

        <p>
           All requests for the API must include the aforementioned authentication headers. Use HTTP POST to create new
           bookings.
        </p>

        <h4>JSON/XML API - Example request header</h4>
        <pre class="code">
POST /booking/api/booking HTTP/1.1
Content-Type: application/xml
Accept: application/xml
X-MyBring-API-Uid: oc@java.no
X-MyBring-API-Key: f00f000f-00f0-f0f0-f0f0-f0f0f0f0ff00
User-Agent: oc-rest-cli/0.1.1-235dff
Host: www.mybring.com
Connection: keep-alive
Content-Length: 2126
        </pre>

        <h4>JSON API - Example request</h4>

        <pre class="code">
{
    "testIndicator": true,
    "schemaVersion": "1",
    "consignments": [
        {
            "correlationId": "INTERNAL-123456",
            "shippingDateTime": "2012-01-10T10:30:00",
            "parties": {
                "sender": {
                    "name": "Ola Nordmann",
                    "addressLine": "Testsvingen 12",
                    "postalCode": "0263",
                    "city": "OSLO",
                    "countryCode": "no",
                    "reference": "1234",
                    "additionalAddressInfo": "Hentes på baksiden etter klokken to",
                    "contact": {
                        "name": "Trond Nordmann",
                        "email": "trond@normanntest.no",
                        "phoneNumber": "99999999"
                    }
                },
                "recipient": {
                    "name": "Tore Mottaker",
                    "addressLine": "Mottakerveien 14",
                    "addressLine2": "c/o Tina Mottaker",
                    "postalCode": "0659",
                    "city": "OSLO",
                    "countryCode": "no",
                    "reference": "43242",
                    "additionalAddressInfo": "Bruk ringeklokken",
                    "contact": {
                        "name": "Tore Mottaker",
                        "email": "tore@mottakertest.no",
                        "phoneNumber": "88888888"
                    }
                }
            },
            "product": {
                "id": "SERVICEPAKKE",
                "customerNumber": "PARCELS_NORWAY-10005540322",
                "services": {
                    "recipientNotification": {
                        "email": "sender@sender.com",
                        "mobile": "97777777"
                    }
                }
            },
            "packages": [{
                    "correlationId": "PACKAGE-123",
                    "weightInKg": "1.1",
                    "dimensions": {
                        "heightInCm": "10",
                        "widthInCm": "10",
                        "lengthInCm": "10"
                    }
            }]
    }]
}
        </pre>

        <h4>JSON API - Example response: succesful request</h4>
        <pre class="code">
{
    "consignments": [
        {
            "correlationId": "INTERNAL-123456",
            "confirmation": {
                "consignmentNumber": "70438101268018539",
                "productSpecificData": null,
                "links": {
                    "labels": "http://s3.amazonaws.com/bring_booking_labels/a21adb80e6d6f7f08264b1570c14ce9ab90b70a3.pdf",
                    "tracking": "http://sporing.bring.no/sporing.html?q=70438101268018539"
                },
                "dateAndTimes": {
                    "earliestPickup": null,
                    "expectedDelivery": 1327446000000
                },
                "packages": [
                    {
                        "correlationId": "PACKAGE-123",
                        "packageNumber": "370438101268058536",
                        "productSpecificData": null
                    }
                ]
            },
            "errors": null
        }
    ]
}
        </pre>

        <h4>JSON API - Example response: failed request</h4>
        <pre class="code">
{
    "consignments": [
        {
            "confirmation": null,
            "errors": [
                {
                    "uniqueId": "b2e73d9f-6281-4ed2-91ee-431eba33f766",
                    "code": "BOOK-INPUT-023",
                    "messages": [
                        {
                            "lang": "en",
                            "message": "The shipment is too big to send with the given product"
                        }
                    ]
                }
            ]
        }
    ]
}
        </pre>

        <h4>XML API - Example request</h4>

        <pre class="code">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;bookingRequest xmlns=&quot;http://www.bring.no/booking/&quot; testIndicator=&quot;true&quot;&gt;
  &lt;schemaVersion&gt;1&lt;/schemaVersion&gt;

  &lt;consignments&gt;

    &lt;consignment correlationId=&quot;INTERNAL-123456&quot;&gt;

      &lt;shippingDateTime&gt;2012-01-23T06:24:09&lt;/shippingDateTime&gt;

      &lt;parties&gt;
        &lt;sender&gt;
          &lt;name&gt;Ola Nordmann&lt;/name&gt;
          &lt;addressLine&gt;Testsvingen 12&lt;/addressLine&gt;
          &lt;postalCode&gt;0263&lt;/postalCode&gt;
          &lt;city&gt;OSLO&lt;/city&gt;
          &lt;countryCode&gt;no&lt;/countryCode&gt;
          &lt;reference&gt;1234&lt;/reference&gt;
          &lt;additionalAddressInfo&gt;Hentes p&#229; baksiden etter klokken to&lt;/additionalAddressInfo&gt;
          &lt;contact&gt;
            &lt;name&gt;Trond Nordmann&lt;/name&gt;
            &lt;email&gt;trond@normanntest.no&lt;/email&gt;
            &lt;phoneNumber&gt;99999999&lt;/phoneNumber&gt;
          &lt;/contact&gt;
        &lt;/sender&gt;

        &lt;recipient&gt;
          &lt;name&gt;Tore Mottaker&lt;/name&gt;
          &lt;addressLine&gt;Mottakerveien 14&lt;/addressLine&gt;
          &lt;addressLine2&gt;c/o Tina Mottaker&lt;/addressLine2&gt;
          &lt;postalCode&gt;0659&lt;/postalCode&gt;
          &lt;city&gt;OSLO&lt;/city&gt;
          &lt;countryCode&gt;no&lt;/countryCode&gt;
          &lt;reference&gt;43242&lt;/reference&gt;
          &lt;additionalAddressInfo&gt;Bruk ringeklokken&lt;/additionalAddressInfo&gt;
          &lt;contact&gt;
            &lt;name&gt;Tore Mottaker&lt;/name&gt;
            &lt;email&gt;tore@mottakertest.no&lt;/email&gt;
            &lt;phoneNumber&gt;88888888&lt;/phoneNumber&gt;
          &lt;/contact&gt;
        &lt;/recipient&gt;
      &lt;/parties&gt;

      &lt;product&gt;
        &lt;id&gt;SERVICEPAKKE&lt;/id&gt;
        &lt;customerNumber&gt;PARCELS_NORWAY-10001234123&lt;/customerNumber&gt;
        &lt;services&gt;
          &lt;recipientNotification&gt;
            &lt;email&gt;sender@sender.com&lt;/email&gt;
            &lt;mobile&gt;97777777&lt;/mobile&gt;
          &lt;/recipientNotification&gt;
        &lt;/services&gt;
      &lt;/product&gt;

      &lt;packages&gt;
        &lt;package correlationId=&quot;PACKAGE-123&quot;&gt;
          &lt;weightInKg&gt;1.1&lt;/weightInKg&gt;
          &lt;dimensions&gt;
            &lt;heightInCm&gt;10&lt;/heightInCm&gt;
            &lt;widthInCm&gt;10&lt;/widthInCm&gt;
            &lt;lengthInCm&gt;10&lt;/lengthInCm&gt;
          &lt;/dimensions&gt;
        &lt;/package&gt;
      &lt;/packages&gt;

    &lt;/consignment&gt;
  &lt;/consignments&gt;
&lt;/bookingRequest&gt;
        </pre>

        <h4>XML API - Example request: Courier products with product specific demands</h4>

        <p>
          A few products require some extra information to be booked. Currently this includes all products transported
          by Bring Express.
        <p>

        <pre class="code">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;bookingRequest xmlns=&quot;http://www.bring.no/booking/&quot; testIndicator=&quot;true&quot;&gt;
  &lt;schemaVersion&gt;1&lt;/schemaVersion&gt;

  &lt;consignments&gt;

    &lt;consignment correlationId=&quot;INTERNAL-123456&quot;&gt;

      &lt;shippingDateTime&gt;2012-01-12T11:00:00&lt;/shippingDateTime&gt;

      &lt;parties&gt;
        &lt;sender&gt;
          &lt;name&gt;Ola Nordmann&lt;/name&gt;
          &lt;addressLine&gt;Testsvingen 12&lt;/addressLine&gt;
          &lt;postalCode&gt;0263&lt;/postalCode&gt;
          &lt;city&gt;OSLO&lt;/city&gt;
          &lt;countryCode&gt;no&lt;/countryCode&gt;
          &lt;reference&gt;1234&lt;/reference&gt;
          &lt;additionalAddressInfo&gt;Hentes p&#229; baksiden etter klokken to&lt;/additionalAddressInfo&gt;
          &lt;contact&gt;
            &lt;name&gt;Trond Nordmann&lt;/name&gt;
            &lt;email&gt;trond@normanntest.no&lt;/email&gt;
            &lt;phoneNumber&gt;99999999&lt;/phoneNumber&gt;
          &lt;/contact&gt;
        &lt;/sender&gt;

        &lt;recipient&gt;
          &lt;name&gt;Tore Mottaker&lt;/name&gt;
          &lt;addressLine&gt;Mottakerveien 14&lt;/addressLine&gt;
          &lt;addressLine2&gt;c/o Tina Mottaker&lt;/addressLine2&gt;
          &lt;!--&lt;postalCode&gt;41222&lt;/postalCode&gt;--&gt;
          &lt;city&gt;DUBLIN&lt;/city&gt;
          &lt;countryCode&gt;ie&lt;/countryCode&gt;
          &lt;reference&gt;43242&lt;/reference&gt;
          &lt;additionalAddressInfo&gt;Bruk ringeklokken&lt;/additionalAddressInfo&gt;
          &lt;contact&gt;
            &lt;name&gt;Tore Mottaker&lt;/name&gt;
            &lt;email&gt;tore@mottakertest.no&lt;/email&gt;
            &lt;phoneNumber&gt;88888888&lt;/phoneNumber&gt;
          &lt;/contact&gt;
        &lt;/recipient&gt;
      &lt;/parties&gt;

      &lt;product&gt;
        &lt;id&gt;QUICKPACK_DAY_CERTAIN&lt;/id&gt;
        &lt;customerNumber&gt;EXPRESS_NORWAY-112-TESTNO&lt;/customerNumber&gt;
        &lt;services&gt;
          &lt;recipientNotification&gt;
            &lt;email&gt;sender@sender.com&lt;/email&gt;
            &lt;mobile&gt;777777&lt;/mobile&gt;
          &lt;/recipientNotification&gt;
        &lt;/services&gt;
      &lt;/product&gt;

      &lt;packages&gt;
        &lt;package correlationId=&quot;PACKAGE-123&quot;&gt;
          &lt;weightInKg&gt;1.1&lt;/weightInKg&gt;
          &lt;goodsDescription&gt;Test&lt;/goodsDescription&gt;
          &lt;dimensions&gt;
            &lt;heightInCm&gt;10&lt;/heightInCm&gt;
            &lt;widthInCm&gt;10&lt;/widthInCm&gt;
            &lt;lengthInCm&gt;10&lt;/lengthInCm&gt;
          &lt;/dimensions&gt;
        &lt;/package&gt;
      &lt;/packages&gt;

    &lt;/consignment&gt;
  &lt;/consignments&gt;
&lt;/bookingRequest&gt;
        </pre>




        <br/>
        <h4>XML API - Example response: successful booking</h4>

        <pre class="code">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;
&lt;bookingResponse xmlns=&quot;http://www.bring.no/booking/&quot;&gt;
    &lt;consignments&gt;
        &lt;consignment correlationId=&quot;INTERNAL-123456&quot;&gt;
            &lt;confirmation&gt;
                &lt;consignmentNumber&gt;70438101268012087&lt;/consignmentNumber&gt;
                &lt;links&gt;
                    &lt;labels&gt;http://beta.qa.bring.no/booking/labels/1370?auth-token=a2148be1-8530-4e85-8e57-4e94e0a591f1&lt;/labels&gt;
                    &lt;tracking&gt;http://sporing.bring.no/api/tracking.xml?q=70438101268012087&lt;/tracking&gt;
                &lt;/links&gt;
                &lt;dateAndTimes&gt;
                    &lt;expectedDelivery&gt;2011-12-09T09:24:59.949+01:00&lt;/expectedDelivery&gt;
                &lt;/dateAndTimes&gt;
                &lt;packages&gt;
                    &lt;package correlationId=&quot;PACKAGE-123&quot;&gt;
                        &lt;packageNumber&gt;370438101268040241&lt;/packageNumber&gt;
                    &lt;/package&gt;
                &lt;/packages&gt;
            &lt;/confirmation&gt;
        &lt;/consignment&gt;
    &lt;/consignments&gt;
&lt;/bookingResponse&gt;
        </pre>

        <br/>
        <h4>XML API - Example response: failed booking</h4>

        <pre class="code">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;bookingResponse xmlns=&quot;http://www.bring.no/booking/&quot;&gt;
  &lt;consignments&gt;

    &lt;consignment correlationId=&quot;INTERNAL-123456&quot;&gt;
      &lt;errors&gt;
        &lt;error&gt;
          &lt;uniqueId&gt;3b473ad0-15c5-11e1-be50-0800200c9a66&lt;/uniqueId&gt;
          &lt;code&gt;BOOK-INPUT-016&lt;/code&gt;
          &lt;messages&gt;
            &lt;message lang=&quot;en&quot;&gt;City must be provided&lt;/message&gt;
          &lt;/messages&gt;
        &lt;/error&gt;
      &lt;/errors&gt;
    &lt;/consignment&gt;

  &lt;/consignments&gt;
&lt;/bookingResponse&gt;
        </pre>


        <br/>
        <h4><a name="schema">XML Schema Definition (XSD)</a></h4>

        <pre class="code">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;
&lt;xs:schema elementFormDefault=&quot;qualified&quot; version=&quot;1.0&quot; targetNamespace=&quot;http://www.bring.no/booking/&quot; xmlns=&quot;http://www.bring.no/booking/&quot; xmlns:tns=&quot;http://www.bring.no/booking/&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;

  &lt;xs:element name=&quot;bookingRequest&quot; type=&quot;BookingRequestType&quot;/&gt;

  &lt;xs:element name=&quot;bookingResponse&quot; type=&quot;BookingResponseType&quot;/&gt;

  &lt;xs:complexType name=&quot;BookingRequestType&quot;&gt;
    &lt;xs:all&gt;
      &lt;xs:element name=&quot;schemaVersion&quot; type=&quot;xs:string&quot;/&gt;
      &lt;xs:element name=&quot;consignments&quot;&gt;
        &lt;xs:complexType&gt;
          &lt;xs:sequence&gt;
            &lt;xs:element name=&quot;consignment&quot; type=&quot;ConsignmentRequestType&quot; maxOccurs=&quot;unbounded&quot;/&gt;
          &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
    &lt;/xs:all&gt;
    &lt;xs:attribute name=&quot;correlationId&quot; type=&quot;xs:string&quot;/&gt;
  &lt;/xs:complexType&gt;

  &lt;xs:complexType name=&quot;ConsignmentRequestType&quot;&gt;
    &lt;xs:all&gt;
      &lt;xs:element name=&quot;shippingDateTime&quot; type=&quot;xs:dateTime&quot; minOccurs=&quot;0&quot;/&gt;
      &lt;xs:element name=&quot;parties&quot; type=&quot;PartiesRequestType&quot;/&gt;
      &lt;xs:element name=&quot;product&quot; type=&quot;ProductRequestType&quot;/&gt;
      &lt;xs:element name=&quot;packages&quot;&gt;
        &lt;xs:complexType&gt;
          &lt;xs:sequence&gt;
            &lt;xs:element name=&quot;package&quot; type=&quot;PackageRequestType&quot; maxOccurs=&quot;unbounded&quot;/&gt;
          &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
    &lt;/xs:all&gt;
    &lt;xs:attribute name=&quot;correlationId&quot; type=&quot;xs:string&quot;/&gt;
  &lt;/xs:complexType&gt;

  &lt;xs:complexType name=&quot;PartiesRequestType&quot;&gt;
    &lt;xs:all&gt;
      &lt;xs:element name=&quot;sender&quot; type=&quot;PartyRequestType&quot;/&gt;
      &lt;xs:element name=&quot;recipient&quot; type=&quot;PartyRequestType&quot;/&gt;
    &lt;/xs:all&gt;
  &lt;/xs:complexType&gt;

  &lt;xs:complexType name=&quot;PartyRequestType&quot;&gt;
    &lt;xs:all&gt;
      &lt;xs:element name=&quot;name&quot; type=&quot;xs:string&quot;/&gt;
      &lt;xs:element name=&quot;addressLine&quot; type=&quot;xs:string&quot;/&gt;
      &lt;xs:element name=&quot;addressLine2&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot;/&gt;
      &lt;xs:element name=&quot;postalCode&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot;/&gt;
      &lt;xs:element name=&quot;city&quot; type=&quot;xs:string&quot;/&gt;
      &lt;xs:element name=&quot;countryCode&quot; type=&quot;xs:string&quot;/&gt;
      &lt;xs:element name=&quot;reference&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot;/&gt;
      &lt;xs:element name=&quot;additionalAddressInfo&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot;/&gt;
      &lt;xs:element name=&quot;contact&quot; type=&quot;ContactRequestType&quot; minOccurs=&quot;0&quot;/&gt;
    &lt;/xs:all&gt;
  &lt;/xs:complexType&gt;

  &lt;xs:complexType name=&quot;ContactRequestType&quot;&gt;
    &lt;xs:all&gt;
      &lt;xs:element name=&quot;name&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot;/&gt;
      &lt;xs:element name=&quot;email&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot;/&gt;
      &lt;xs:element name=&quot;phoneNumber&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot;/&gt;
    &lt;/xs:all&gt;
  &lt;/xs:complexType&gt;

  &lt;xs:complexType name=&quot;ProductRequestType&quot;&gt;
    &lt;xs:all&gt;
      &lt;xs:element name=&quot;id&quot; type=&quot;xs:string&quot;/&gt;
      &lt;xs:element name=&quot;customerNumber&quot; type=&quot;xs:string&quot;/&gt;
      &lt;xs:element name=&quot;services&quot; type=&quot;ServicesRequestType&quot; minOccurs=&quot;0&quot;/&gt;
    &lt;/xs:all&gt;
  &lt;/xs:complexType&gt;

  &lt;xs:complexType name=&quot;ServicesRequestType&quot;&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name=&quot;recipientNotification&quot; type=&quot;RecipientNotificationRequestType&quot; minOccurs=&quot;0&quot;/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;

  &lt;xs:complexType name=&quot;RecipientNotificationRequestType&quot;&gt;
    &lt;xs:all&gt;
      &lt;xs:element name=&quot;email&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot;/&gt;
      &lt;xs:element name=&quot;mobile&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot;/&gt;
    &lt;/xs:all&gt;
  &lt;/xs:complexType&gt;

  &lt;xs:complexType name=&quot;PackageRequestType&quot;&gt;
    &lt;xs:all&gt;
      &lt;xs:element name=&quot;weightInKg&quot; type=&quot;xs:double&quot; minOccurs=&quot;0&quot;/&gt;
      &lt;xs:element name=&quot;goodsDescription&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot;/&gt;
      &lt;xs:element name=&quot;dimensions&quot; type=&quot;MeasurementsRequestType&quot; minOccurs=&quot;0&quot;/&gt;
    &lt;/xs:all&gt;
    &lt;xs:attribute name=&quot;correlationId&quot; type=&quot;xs:string&quot;/&gt;
  &lt;/xs:complexType&gt;

  &lt;xs:complexType name=&quot;MeasurementsRequestType&quot;&gt;
    &lt;xs:all&gt;
      &lt;xs:element name=&quot;heightInCm&quot; type=&quot;xs:int&quot;/&gt;
      &lt;xs:element name=&quot;widthInCm&quot; type=&quot;xs:int&quot;/&gt;
      &lt;xs:element name=&quot;lengthInCm&quot; type=&quot;xs:int&quot;/&gt;
    &lt;/xs:all&gt;
  &lt;/xs:complexType&gt;

  &lt;xs:complexType name=&quot;BookingResponseType&quot;&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name=&quot;consignments&quot;&gt;
        &lt;xs:complexType&gt;
          &lt;xs:sequence&gt;
            &lt;xs:element name=&quot;consignment&quot; type=&quot;ConsignmentResponseType&quot; maxOccurs=&quot;unbounded&quot;/&gt;
          &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;

  &lt;xs:complexType name=&quot;ConsignmentResponseType&quot;&gt;
    &lt;xs:all&gt;
      &lt;xs:element name=&quot;confirmation&quot; type=&quot;ConfirmationResponseType&quot; minOccurs=&quot;0&quot;/&gt;
      &lt;xs:element name=&quot;errors&quot; minOccurs=&quot;0&quot;&gt;
        &lt;xs:complexType&gt;
          &lt;xs:sequence&gt;
            &lt;xs:element name=&quot;error&quot; type=&quot;ErrorResponseType&quot; minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot;/&gt;
          &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
    &lt;/xs:all&gt;
    &lt;xs:attribute name=&quot;correlationId&quot; type=&quot;xs:string&quot;/&gt;
  &lt;/xs:complexType&gt;

  &lt;xs:complexType name=&quot;ConfirmationResponseType&quot;&gt;
    &lt;xs:all&gt;
      &lt;xs:element name=&quot;consignmentNumber&quot; type=&quot;xs:string&quot;/&gt;
      &lt;xs:element name=&quot;productSpecificData&quot; type=&quot;ProductSpecificDataResponseType&quot; minOccurs=&quot;0&quot;/&gt;
      &lt;xs:element name=&quot;links&quot; type=&quot;LinksResponseType&quot;/&gt;
      &lt;xs:element name=&quot;dateAndTimes&quot; type=&quot;DtoDateAndTimesResponseType&quot;/&gt;
      &lt;xs:element name=&quot;packages&quot;&gt;
        &lt;xs:complexType&gt;
          &lt;xs:sequence&gt;
            &lt;xs:element name=&quot;package&quot; type=&quot;PackageResponseType&quot; maxOccurs=&quot;unbounded&quot;/&gt;
          &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
    &lt;/xs:all&gt;
  &lt;/xs:complexType&gt;

  &lt;xs:complexType name=&quot;ProductSpecificDataResponseType&quot;&gt;
    &lt;xs:all&gt;
      &lt;xs:element name=&quot;upsShipmentNumber&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot;/&gt;
      &lt;xs:element name=&quot;upsTrackingNumber&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot;/&gt;
    &lt;/xs:all&gt;
  &lt;/xs:complexType&gt;

  &lt;xs:complexType name=&quot;LinksResponseType&quot;&gt;
    &lt;xs:all&gt;
      &lt;xs:element name=&quot;labels&quot; type=&quot;xs:string&quot;/&gt;
      &lt;xs:element name=&quot;tracking&quot; type=&quot;xs:string&quot;/&gt;
    &lt;/xs:all&gt;
  &lt;/xs:complexType&gt;

  &lt;xs:complexType name=&quot;DtoDateAndTimesResponseType&quot;&gt;
    &lt;xs:all&gt;
      &lt;xs:element name=&quot;earliestPickup&quot; type=&quot;xs:dateTime&quot; minOccurs=&quot;0&quot;/&gt;
      &lt;xs:element name=&quot;expectedDelivery&quot; type=&quot;xs:dateTime&quot; minOccurs=&quot;0&quot;/&gt;
    &lt;/xs:all&gt;
  &lt;/xs:complexType&gt;

  &lt;xs:complexType name=&quot;PackageResponseType&quot;&gt;
    &lt;xs:all&gt;
      &lt;xs:element name=&quot;packageNumber&quot; type=&quot;xs:string&quot;/&gt;
      &lt;xs:element name=&quot;productSpecificData&quot; type=&quot;ProductSpecificDataResponseType&quot; minOccurs=&quot;0&quot;/&gt;
    &lt;/xs:all&gt;
    &lt;xs:attribute name=&quot;correlationId&quot; type=&quot;xs:string&quot;/&gt;
  &lt;/xs:complexType&gt;

  &lt;xs:complexType name=&quot;ErrorResponseType&quot;&gt;
    &lt;xs:all&gt;
      &lt;xs:element name=&quot;uniqueId&quot; type=&quot;xs:string&quot;/&gt;
      &lt;xs:element name=&quot;code&quot; type=&quot;xs:string&quot;/&gt;
      &lt;xs:element name=&quot;messages&quot;&gt;
        &lt;xs:complexType&gt;
          &lt;xs:sequence&gt;
            &lt;xs:element name=&quot;message&quot; type=&quot;MessageResponseType&quot; maxOccurs=&quot;unbounded&quot;/&gt;
          &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
    &lt;/xs:all&gt;
  &lt;/xs:complexType&gt;

  &lt;xs:complexType name=&quot;MessageResponseType&quot;&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base=&quot;xs:string&quot;&gt;
        &lt;xs:attribute name=&quot;lang&quot; type=&quot;xs:string&quot; use=&quot;required&quot;/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:schema&gt;
        </pre>

]]>
  </Content>
</Article>